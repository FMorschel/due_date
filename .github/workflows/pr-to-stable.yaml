name: PR Checks to Stable

on:
  pull_request:
    branches:
      - stable

permissions:
  contents: read
  pull-requests: write

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone stable branch as old_version
        run: |
          git clone --branch stable --single-branch --depth 1 https://github.com/${{ github.repository }} old_version
          rm -rf old_version/.git

      - name: Clone PR branch as new_version
        run: |
          git clone --branch ${{ github.head_ref }} --single-branch --depth 1 https://github.com/${{ github.repository }} new_version
          rm -rf new_version/.git

      - name: Generate SHA of lib/ folder
        run: |
          (cd new_version/lib && find . -type f -exec sha1sum {} \; | sort | sha1sum | awk '{print $1}') > ../lib_folder.sha
          cat ../lib_folder.sha

      - name: Generate SHA of pubspec.yaml
        run: |
          sha1sum new_version/pubspec.yaml | awk '{print $1}' > pubspec_yaml.sha
          cat pubspec_yaml.sha

      - name: Fetch and verify last apitool-meta comment from PR
        id: check_hashes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENTS=$(gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments')
          echo "$COMMENTS" | jq -r '.[] | select(.author.login=="github-actions[bot]") | select(.body | contains("<!-- apitool-meta")) | .body' | tail -n 1 > last_apitool_meta_comment.txt
          cat last_apitool_meta_comment.txt

          # Extract hashes from the last comment
          LAST_LIB_SHA=$(grep 'lib_sha:' last_apitool_meta_comment.txt | awk -F': ' '{print $2}')
          LAST_PUBSPEC_SHA=$(grep 'pubspec_yaml_sha:' last_apitool_meta_comment.txt | awk -F': ' '{print $2}')

          # Read current hashes
          CUR_LIB_SHA=$(cat lib_folder.sha)
          CUR_PUBSPEC_SHA=$(cat pubspec_yaml.sha)

          # Compare and print result, set output
          if [ "$LAST_LIB_SHA" = "$CUR_LIB_SHA" ] && [ "$LAST_PUBSPEC_SHA" = "$CUR_PUBSPEC_SHA" ]; then
            echo "Hashes match: lib/ and pubspec.yaml have not changed since last comment."
            echo "skip_steps=true" >> $GITHUB_OUTPUT
          else
            echo "Hashes do not match: lib/ or pubspec.yaml have changed since last comment."
            echo "skip_steps=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Dart
        if: steps.check_hashes.outputs.skip_steps != 'true'
        uses: dart-lang/setup-dart@v1

      - name: Run API diff and save report
        if: steps.check_hashes.outputs.skip_steps != 'true'
        continue-on-error: true
        run: |
          dart pub global activate dart_apitool && dart-apitool diff --old ./old_version --new ./new_version --ignore-prerelease on --report-format markdown --report-file-path apitool_report.md

      - name: Comment API diff report on PR
        if: steps.check_hashes.outputs.skip_steps != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LIB_SHA=$(cat lib_folder.sha)
          PUBSPEC_SHA=$(cat pubspec_yaml.sha)
          echo "$(cat apitool_report.md)

          <!-- apitool-meta
          lib_sha: $LIB_SHA
          pubspec_yaml_sha: $PUBSPEC_SHA
          -->" > apitool_report_with_meta.md
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat apitool_report_with_meta.md)"
