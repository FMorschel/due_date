name: Update Docs

on:
  push:
    branches:
      - stable
    paths:
      - 'lib/**'
      - 'pubspec.yaml'
      - '.github/workflows/docs.yaml'
  pull_request:
    branches:
      - stable
    paths:
      - 'lib/**'
      - 'pubspec.yaml'
      - '.github/workflows/docs.yaml'

jobs:
  update-docs:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      pr_exists: ${{ steps.update_docs_branch.outputs.pr_exists }}
      docs_changed: ${{ steps.update_docs_branch.outputs.docs_changed }}
      docs_hash_changed: ${{ steps.compare_docs_hash.outputs.hash_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Analyze project source
        run: dart analyze

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | head -n1 | cut -d ' ' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate docs
        run: dart doc

      - name: Compare docs hash with gh-pages
        id: compare_docs_hash
        shell: bash
        run: |
          # Compare generated docs (doc/api) with gh-pages root (excluding .git)
          if [ ! -d "doc/api" ]; then
            echo "No doc/api folder found"
            exit 1
          fi

          # Fetch gh-pages branch and check it out in a temp dir
          TMP_GHPAGES=$(mktemp -d)
          git fetch origin gh-pages
          git worktree add "$TMP_GHPAGES" gh-pages

          # List files (relative paths) in generated docs and gh-pages root (excluding .git)
          pushd doc/api > /dev/null
          find . -type f | sort > /tmp/generated_files.txt
          popd > /dev/null

          pushd "$TMP_GHPAGES" > /dev/null
          find . -type f ! -path './.git/*' | sort > /tmp/ghpages_files.txt
          popd > /dev/null

          # Compare file lists
          if ! diff -q /tmp/generated_files.txt /tmp/ghpages_files.txt; then
            echo "File structure differs. Docs changed."
            echo "hash_changed=true" >> $GITHUB_OUTPUT
          else
            # File lists match, compare file contents
            DIFF_FOUND=0
            while read -r relpath; do
              if ! cmp -s "doc/api/$relpath" "$TMP_GHPAGES/$relpath"; then
                echo "Difference found in $relpath"
                DIFF_FOUND=1
                break
              fi
            done < /tmp/generated_files.txt
            if [ "$DIFF_FOUND" = "1" ]; then
              echo "File content differs. Docs changed."
              echo "hash_changed=true" >> $GITHUB_OUTPUT
            else
              echo "Docs unchanged."
              echo "hash_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

          # Clean up
          git worktree remove "$TMP_GHPAGES" --force
          rm -rf "$TMP_GHPAGES" /tmp/generated_files.txt /tmp/ghpages_files.txt

      - name: Create or update docs branch
        if: steps.compare_docs_hash.outputs.hash_changed == 'true'
        id: update_docs_branch
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH=docs-for-$VERSION
          
          # Check for existing PR from docs branch to gh-pages
          PR_EXISTS=$(gh pr list --base gh-pages --head "$BRANCH" --state open --json number --jq 'length > 0' || echo false)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
          
          # Check if docs branch exists
          if git ls-remote --exit-code --heads origin "$BRANCH"; then
            echo "Branch $BRANCH exists, checking it out..."
            git fetch origin "$BRANCH"
            git checkout "$BRANCH"
            git reset --hard origin/$BRANCH
          else
            echo "Branch $BRANCH does not exist, creating from gh-pages..."
            # Create docs branch from gh-pages so there is a common ancestor
            git fetch origin gh-pages:gh-pages || git checkout --orphan gh-pages
            git checkout gh-pages || git checkout --orphan gh-pages
            git checkout -b "$BRANCH"
          fi
          
          # Move generated docs from temp location to root
          shopt -s dotglob
          mv /tmp/generated_docs/* .
          shopt -u dotglob
          
          # Add all files
          git add .
          
          echo "Files in working directory:"
          ls -alR
          echo "Files staged for commit:"
          git diff --cached --name-status
          echo "Files changed (not staged):"
          git diff --name-status
          echo "Now checking for changes..."
          
          # Check if there are any changes to commit (FIXED LOGIC)
          if ! git diff --cached --quiet; then
            echo "Changes detected, committing..."
            # Get the commit SHA that triggered the workflow
            TRIGGER_COMMIT=${{ github.sha }}
            COMMIT_MSG="Update docs for $VERSION (generated from $TRIGGER_COMMIT)"
            git commit -m "$COMMIT_MSG"
            git push -f origin "$BRANCH"
            echo "docs_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "docs_changed=false" >> $GITHUB_OUTPUT
          fi

  create-docs-pr:
    needs: [update-docs]
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    if: needs.update-docs.outputs.pr_exists == 'false' && needs.update-docs.outputs.docs_changed == 'true' && needs.update-docs.outputs.docs_hash_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create or update PR to gh-pages
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.update-docs.outputs.version }}
        run: |
          BRANCH=docs-for-$VERSION
          PR_TITLE="Docs for $VERSION"

          TRIGGER_COMMIT=${{ github.sha }}
          PR_BODY="Automated documentation update for version $VERSION.

          Triggered by commit $TRIGGER_COMMIT."

          # If triggered by a PR, mention it in the PR body
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ github.event.pull_request.number }}" ]; then
            PR_BODY="$PR_BODY
            
            Triggered by #${{ github.event.pull_request.number }}"
          fi

          # Check if a PR already exists
          PR_NUMBER=$(gh pr list --base gh-pages --head "$BRANCH" --state open --json number --jq '.[0].number' || echo "")
          if [ -z "$PR_NUMBER" ]; then
            echo "Creating new PR..."
            gh pr create --base gh-pages --head "$BRANCH" --title "$PR_TITLE" --body "$PR_BODY"
          else
            echo "PR #$PR_NUMBER already exists. Updating title and body."
            gh pr edit "$PR_NUMBER" --title "$PR_TITLE" --body "$PR_BODY"
          fi