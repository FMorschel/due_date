#!/bin/sh

echo "Running pre-commit checks..."

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
		LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# Do dart checks only if ./lib or ./test directories were changed
if [ -z "$(git diff --cached --name-only --diff-filter=ACMRTUXB $against | grep -E '^(lib/|test/)')" ]; then
	echo "No Dart files were changed. Skipping Dart checks."
	exit 0
fi

# Fetch packages
echo "Running dart pub get..."
dart pub get >/dev/null
if [ $? -ne 0 ]; then
  echo "dart pub get failed."
	echo "Please run 'dart pub get' in the project root."
  exit 1
fi

# Dart analyzer no errors should be found
echo "Running Dart analyzer..."
dart analyze
if [ $? -ne 0 ]; then
  echo "Dart analyzer found issues."
	echo "Please run 'dart analyze' in the project root."
  exit 1
fi

# Dart tests should pass
echo "Running Dart tests..."
dart test . --fail-fast 1>/dev/null
# Print files that failed tests
if [ $? -ne 0 ]; then
	echo "Dart tests failed."
	echo "Please run 'dart test' in the project root."
	exit 1
fi

# Dart fix --apply then any changed files should be added to the commit
echo "Running Dart fix..."
dart fix --apply .
git add .

# Dart format then any changed files should be added to the commit
echo "Running Dart format..."
dart format .
git add .

# return 0 to indicate that everything went well
echo "Pre-commit checks passed."
exit 0
